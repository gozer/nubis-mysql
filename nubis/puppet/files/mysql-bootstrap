#!/bin/bash


export PATH=/usr/local/bin:/opt/aws/bin:$PATH

# Parse user-data
eval "$(curl -fq http://169.254.169.254/latest/user-data)"

set -x

REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq '.region' -r)
AZ=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq '.availabilityZone' -r)
INSTANCE_ID=$(curl -s -fq http://169.254.169.254/latest/meta-data/instance-id)

export AWS_DEFAULT_REGION=$REGION

VOLUME_ID=$(aws ec2 describe-volumes --filters Name=tag:ServiceName,Values="$NUBIS_PROJECT" Name=tag:Environment,Values="$NUBIS_ENVIRONMENT" Name=availability-zone,Values="$AZ" | jq -r .Volumes[0].VolumeId)

echo "Finding our volume... $VOLUME_ID"

aws ec2 attach-volume --volume-id "$VOLUME_ID" --instance-id "$INSTANCE_ID" --device /dev/xvdb

echo "Attaching our volume..."

VOLUME_STATUS=$(aws ec2 describe-volumes --volume-id "$VOLUME_ID" | jq -r .Volumes[0].State)

while [ "$VOLUME_STATUS" != "in-use" ]; do
  sleep 2;
  VOLUME_STATUS=$(aws ec2 describe-volumes --volume-id "$VOLUME_ID" | jq -r .Volumes[0].State)
done

echo "Volume status: $VOLUME_STATUS"

echo "Waiting for volume to be discovered..."
while [ ! -e /dev/xvdb ]; do sleep 1; done

echo "Mounting our volume..."
blkid /dev/xvdb || mkfs.ext4 /dev/xvdb -L "mysql-${NUBIS_PROJECT}-${NUBIS_ENVIRONMENT}"
mount /dev/xvdb -onoatime /var/lib/mysql
rm -rf /var/lib/mysql/lost+found

SERVER_ID=$(ec2-metadata --local-ipv4 | cut -d: -f2| sed -e's/[ \.]//g')

REPORT_HOST=$(curl -s -fq http://169.254.169.254/latest/meta-data/local-ipv4)
if [ -f /var/lib/mysql/nubis/ENI ]; then
  ENI=$(cat /var/lib/mysql/nubis/ENI)
  ENI_IP=$(aws ec2 describe-network-interfaces --network-interface-id "$ENI" | jq -r .NetworkInterfaces[0].PrivateIpAddress)
  REPORT_HOST=$ENI_IP
  echo "Attaching ENI $ENI($ENI_IP) ..."
  aws ec2 attach-network-interface --network-interface-id "$ENI" --instance-id "$INSTANCE_ID" --device-index 1
fi

echo "Generating my.cnf (server-id: $SERVER_ID) (report-host: $REPORT_HOST)..."

MYSQL_ACTIVE="0"
if [ -r /etc/nubis-config/active.sh ]; then
  . /etc/nubis-config/active.sh
fi

READ_ONLY="ON"
if [ "$MYSQL_ACTIVE" == "1" ]; then
  READ_ONLY="OFF"
fi

if [ -r /var/lib/mysql/nubis/server.key ]; then
  SSL="
ssl-ca=/var/lib/mysql/nubis/ca.crt
ssl-cert=/var/lib/mysql/nubis/server.crt
ssl-key=/var/lib/mysql/nubis/server.key
"
fi

# XXX: Grab my.cnf from the volume...

cat << EOF > /etc/my.cnf
[mysqld]
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

read_only=$READ_ONLY

datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

expire_logs_days=4
server-id=$SERVER_ID
report_host=$REPORT_HOST
log-bin=/var/lib/mysql/aws-bin
log_slave_updates
relay-log=/var/lib/mysql/aws-relay-bin
relay-log-index=/var/lib/mysql/aws-relay-bin.index

relay-log-info-repository=TABLE
master_info_repository=TABLE
relay_log_recovery=1
                                                                                                                                                                                                                                   
binlog_format=MIXED                                                                                                                                                                                                                
                                                                                                                                                                                                                                   
skip-external-locking                                                                                                                                                                                                              
character_set_server=utf8                                                                                                                                                                                                          
default_storage_engine=InnoDB                                                                                                                                                                                                      
                                                                                                                                                                                                                                   
# bugzilla needs this; nothing else should use it                                                                                                                                                                                  
ft_min_word_len=2                                                                                                                                                                                                                  
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                   


key_buffer_size=512M
sort_buffer_size=256K
join_buffer_size=8M
net_buffer_length=32K
preload_buffer_size=2M
max_allowed_packet=1G
max_connections=4800

wait_timeout=600
interactive_timeout=600
thread_cache_size=500
query_cache_size=0
query_cache_type=0
table_open_cache=3072
read_buffer_size=8M
sync-binlog=1

# Here you can see queries with especially long duration
log_output = FILE
# note: do not use "ON" here - it fails silently
slow_query_log = 1
slow_query_log_file        = /var/log/mysql-slow.log
long_query_time=2

innodb_buffer_pool_size=24G
innodb_log_file_size=300M
innodb_log_buffer_size=50M
innodb_lock_wait_timeout=50
innodb_file_per_table

innodb_flush_log_at_trx_commit=2

read_rnd_buffer_size=4M
tmp_table_size=32M

innodb_buffer_pool_dump_at_shutdown=TRUE
innodb_buffer_pool_load_at_startup=TRUE

$SSL

[mysql.server]
user=mysql
ignore-db-dirs=lost+found,nubis

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid

EOF

if [ -f /var/lib/mysql/nubis/MASTER ]; then
  echo "Making /etc/hosts entries for our master..."
  cat /var/lib/mysql/nubis/MASTER >> /etc/hosts
fi

if [ -f /var/lib/mysql/nubis/my.cnf ]; then
  echo "Found existing my.cnf, linking..."
  ln -sf /var/lib/mysql/nubis/my.cnf /etc/my.cnf
fi

if [ -f /var/lib/mysql/nubis/root.my.cnf ]; then
  echo "Creating root .my.cnf..."
  ln -sf /var/lib/mysql/nubis/root.my.cnf /root/.my.cnf
fi

if [ -f /var/lib/mysql/nubis/AUTO_START ]; then
  echo "Starting MySQL..."
  touch /var/log/mysql-slow.log
  chown mysql:mysql /var/log/mysql-slow.log
  service mysqld start
fi

if [ -f /var/lib/mysql/nubis/svc-mysql.json ]; then
  echo "Installing MySQL Consul service..."
  ln -sf /var/lib/mysql/nubis/svc-mysql.json /etc/consul/svc-mysql.json
  echo "Reloading Consul..."
  service consul restart
fi

if [ -f /var/lib/mysql/nubis/mysql.yaml ]; then
  echo "Installing DataDog service for MySQL..."
  ln -sf /var/lib/mysql/nubis/mysql.yaml /etc/dd-agent/conf.d/mysql.yaml
  service datadog-agent restart
fi


exit
